{"ast":null,"code":"var _jsxFileName = \"D:\\\\UpWork\\\\AI_Inga\\\\CPS\\\\CPS_FormSubmitterAutomation\\\\Gemini\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport apiClient from '../api/apiClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const fetchUser = useCallback(async () => {\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      try {\n        const {\n          data\n        } = await apiClient.get('/users/me');\n        setUser(data);\n      } catch (error) {\n        console.error(\"Failed to fetch user\", error);\n        setUser(null);\n        localStorage.removeItem('accessToken');\n      }\n    }\n    setLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchUser();\n  }, [fetchUser]);\n  const login = async (email, password) => {\n    const response = await apiClient.post('/auth/login', new URLSearchParams({\n      username: email,\n      password: password\n    }));\n    const {\n      access_token\n    } = response.data;\n    localStorage.setItem('accessToken', access_token);\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n    await fetchUser(); // Fetch full user details after login\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('accessToken');\n    delete apiClient.defaults.headers.common['Authorization'];\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"ac3jDG6KKItrNi4VAzavDq3vTG8=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","apiClient","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","fetchUser","token","localStorage","getItem","data","get","error","console","removeItem","login","email","password","response","post","URLSearchParams","username","access_token","setItem","defaults","headers","common","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/UpWork/AI_Inga/CPS/CPS_FormSubmitterAutomation/Gemini/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from 'react';\r\nimport apiClient from '../api/apiClient';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchUser = useCallback(async () => {\r\n    const token = localStorage.getItem('accessToken');\r\n    if (token) {\r\n      try {\r\n        const { data } = await apiClient.get('/users/me');\r\n        setUser(data);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch user\", error);\r\n        setUser(null);\r\n        localStorage.removeItem('accessToken');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchUser();\r\n  }, [fetchUser]);\r\n\r\n  const login = async (email, password) => {\r\n    const response = await apiClient.post('/auth/login', new URLSearchParams({\r\n      username: email,\r\n      password: password\r\n    }));\r\n    const { access_token } = response.data;\r\n    localStorage.setItem('accessToken', access_token);\r\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\r\n    await fetchUser(); // Fetch full user details after login\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('accessToken');\r\n    delete apiClient.defaults.headers.common['Authorization'];\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC9E,OAAOC,SAAS,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMc,SAAS,GAAGZ,WAAW,CAAC,YAAY;IACxC,MAAMa,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACjD,IAAIF,KAAK,EAAE;MACT,IAAI;QACF,MAAM;UAAEG;QAAK,CAAC,GAAG,MAAMf,SAAS,CAACgB,GAAG,CAAC,WAAW,CAAC;QACjDR,OAAO,CAACO,IAAI,CAAC;MACf,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CT,OAAO,CAAC,IAAI,CAAC;QACbK,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;MACxC;IACF;IACAT,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAENZ,SAAS,CAAC,MAAM;IACda,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,MAAMS,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,MAAMC,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,IAAI,CAAC,aAAa,EAAE,IAAIC,eAAe,CAAC;MACvEC,QAAQ,EAAEL,KAAK;MACfC,QAAQ,EAAEA;IACZ,CAAC,CAAC,CAAC;IACH,MAAM;MAAEK;IAAa,CAAC,GAAGJ,QAAQ,CAACR,IAAI;IACtCF,YAAY,CAACe,OAAO,CAAC,aAAa,EAAED,YAAY,CAAC;IACjD3B,SAAS,CAAC6B,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUJ,YAAY,EAAE;IAC7E,MAAMhB,SAAS,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC;EAED,MAAMqB,MAAM,GAAGA,CAAA,KAAM;IACnBxB,OAAO,CAAC,IAAI,CAAC;IACbK,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;IACtC,OAAOnB,SAAS,CAAC6B,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;EAC3D,CAAC;EAED,oBACE7B,OAAA,CAACC,WAAW,CAAC8B,QAAQ;IAACC,KAAK,EAAE;MAAE3B,IAAI;MAAEa,KAAK;MAAEY,MAAM;MAAEvB;IAAQ,CAAE;IAAAJ,QAAA,EAC3DA;EAAQ;IAAA8B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAChC,EAAA,CA7CWF,YAAY;AAAAmC,EAAA,GAAZnC,YAAY;AA+CzB,eAAeD,WAAW;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}